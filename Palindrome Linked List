class Solution {
     public ListNode middleNode(ListNode head) {
        
        if(head==null || head.next==null){
            return head;
        }
        
        ListNode slow=head;
        ListNode fast=head;
        
        while(fast!=null && fast.next!=null && fast.next.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
        
    }
    
    public ListNode reverseList(ListNode head) {
        
        if(head==null || head.next==null){
            return head;
        }
        
        ListNode curr=head;
        ListNode prev=null;
        ListNode f=null;
        
        while(curr!=null){
            f=curr.next;
            curr.next=prev;
            prev=curr;
            curr=f;
        }
        return prev;
        
    }
    
    public boolean isPalindrome(ListNode head) {
        
        if(head==null || head.next==null){
            return true;
        }
        
        ListNode mid=middleNode(head);
        ListNode nhead=mid.next;
        mid.next=null;
        
        nhead=reverseList(nhead);
        
        ListNode c1=head;
        ListNode c2=nhead;
        
        boolean res=true;
        
        while(c1!=null && c2!=null){
            if(c1.val!=c2.val){
                res=false;
                break;
            }
            c1=c1.next;
            c2=c2.next;
            
            
            
            
        }
        nhead=reverseList(nhead);
            mid.next=nhead;
        
        return res;
    }
}
